package com.generation.blogpessoal.model;
//Model: modelagem do banco de dados(cria√ß√£o das tabelas)

import java.time.LocalDateTime;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

import org.hibernate.annotations.UpdateTimestamp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Entity //referencia que √© uma tabela
@Table(name = "tb_postagens") //define o nome da tabela
public class Postagem {

	@Id //definir que a partir daqui √© um id
    @GeneratedValue(strategy = GenerationType.IDENTITY) //gerar o valor sozinho,como se fosse o auto_increment
    private Long id; //id do tipo Long

    @NotBlank(message = "O atributo t√≠tulo √© Obrigat√≥rio!") //obrigar o usu√°rio a colocar o nome = notnull
    @Size(min = 5, max = 100, message = "O atributo t√≠tulo deve conter no m√≠nimo 05 e no m√°ximo 100 caracteres")
    /*A anota√ß√£o @Size define o valor M√≠nimo (min) e o valor M√°ximo (max) de caracteres do Atributo. N√£o √© obrigat√≥rio
    configurar os 2 par√¢metros. Como o par√¢metro max foi configurado, observe que o mesmo valor informado ser√° inserido 
    na defini√ß√£o dos Atributos titulo (varchar(100)) e texto (varchar(1000)) na tabela tb_postagens no Banco de dados. 
    Voc√™ pode configurar uma mensagem para o usu√°rio atrav√©s do Atributo message.*/
    private String titulo;

    @NotBlank(message = "O atributo texto √© Obrigat√≥rio!")
    @Size(min = 10, max = 1000, message = "O atributo texto deve conter no m√≠nimo 10 e no m√°ximo 1000 caracteres")
    private String texto;

    @UpdateTimestamp //AUTOMATIZA A DATA DA APLICA√á√ÉO PARA A DATA DO SISTEMA
    private LocalDateTime data;
    
    @ManyToOne
    @JsonIgnoreProperties("postagem") // importante pra n√£o exibir v√°rias vezes a mesma informa√ß√£o, colocar o local onde se est√°
    private Tema tema; // n√£o precisaria chamar, pois est√£o no mesmo pacote, j√° s√£o da fam√≠lia
    
    /* = FOREIGN KEY (TEMA_ID) REFERENCE TB_TEMA.ID
    	-- @ManyToOne ü°™ (da rela√ß√£o de que se trata, levando em considera√ß√£o da atual para a outra)
    	-- @JsonIgnoreProperties("nomeDaClassAtual")
    	-- Colocar Getters and Setters da Tema.
    	-- FAZER DE TEMA PARA POSTAGEM TAMB√âM.
     */
    
    @ManyToOne
	@JsonIgnoreProperties("postagem")
	private Usuario usuario;
    
    
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getTitulo() {
		return titulo;
	}

	public void setTitulo(String titulo) {
		this.titulo = titulo;
	}

	public String getTexto() {
		return texto;
	}

	public void setTexto(String texto) {
		this.texto = texto;
	}

	public LocalDateTime getData() {
		return data;
	}

	public void setData(LocalDateTime data) {
		this.data = data;
	}

	
	//Tema
	public Tema getTema() {
		return tema;
	}

	public void setTema(Tema tema) {
		this.tema = tema;
	}
	
	//Usuario
	public Usuario getUsuario() {
		return usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}
	
}
